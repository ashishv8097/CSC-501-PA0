1. Answer 1

----- 0x00000000 -----		<-- Start of memory.

	text

----- 0x0001990d -----		<-- end of text

	data

----- 0x0001e53d -----		<-- end of data

	ebss

----- 0x00028118 -----		<-- end of BSS

	heap

----- 0x00ffdff8 -----		<-- heap's max limit.
----- 0x00ffdffc -----          <-- stack upper limit (4K i.e. 4096 difference from stack base)		|

	

----- 0x00ffefa0 -----          <-- value of stack pointer when printprocstks() is invoked from main.

        

----- 0x00ffefb0 -----          <-- current stack pointer from printtos.
 
        

----- 0x00ffefec -----		<-- base of printtos stack.

        

----- 0x00ffeff4 -----		<-- SP before jumping to printtos.

        

----- 0x00ffeff8 -----          <-- stack base.



----- 0xffffffff -----		<-- end of memory.



2. Answer 2
There is an 8byte (4byte * 2) difference in stack top address before and after calling the printtos() function. The reason for the difference is pushing of return address by the calling of printtos in main, which is 4byte; and, the function printtos pushes EBP on top of stack as first instruction. Thus, there is an 8byte difference.

----- 0x00ffefec -----		<-- After
	
          EBP
	
----- 0x00ffeff0 -----

    return address

----- 0x00ffeff4 -----		<-- Before



3. Answer 3
No, the declared variables are not shown in the stack as compiler optimization has been turned on in the Makefile. However, after turning off the compiler optimization, it could be clearly seen in the objdump of the printtos.o that the variable are being moved to stack. This is because compiler optimization tries to increase the speed of the operation by storing the locally declared variables in the CPU registers.
